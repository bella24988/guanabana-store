package client;

import java.io.IOException;
import java.io.InputStream;

import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;

import java.net.Socket;
import java.net.UnknownHostException;
import java.util.Properties;

import javax.mail.Message;
import javax.mail.MessagingException;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.AddressException;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeMessage;

import modello.Cliente;
import modello.Computer;
import modello.Ordine;
import modello.Pagamento;


import connectionInterface.InterfacciaCliente;

/**
 * Classe ServizioClient: e' la classe che rende disponibile
 * il servizio che permette la comunicazione fra client e server per
 * il pacchetto rivolto al cliente.
 * Implementa InterfacciaCliente.
 * @author  Veronica
 * @author Gabriele
 * @version 3.0 Jan 3, 2013.
 */
public class ServizioClient implements InterfacciaCliente {
	
	/**
	 * Dichiarazione delle variabili
	 */
	private Socket socket;
	private String host; 
	private int port;
	private InputStream lettura;
	private OutputStream scrittura;
	private ObjectInputStream buffer;
	private ObjectOutputStream writer;
	
	private String tipo;
	private int num;
	
	/**
	 * Costruttore del servizio client-server
	 * @param host
	 */
	public ServizioClient(String host) {
		
		super();
		setHost(host);
		try {
			aprireCollegamento();
		} catch (UnknownHostException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	
	@Override
	public void aprireCollegamento() throws UnknownHostException, IOException {
		socket = new Socket(host, 4000);
		
		lettura = socket.getInputStream();
		scrittura = socket.getOutputStream();
		
		System.out.println("Sono il client e apro porte!");
	}

	@Override
	public Cliente fareLogin(String user, String password) throws IOException, ClassNotFoundException {
		Cliente cliente;
		writer = new ObjectOutputStream(scrittura);
		writer.writeObject("login");
		writer.flush();
		System.out.println("Sono il client, escribi al server login");
		buffer = new ObjectInputStream(lettura);
		String risposta = (String) buffer.readObject();
		if (risposta.compareTo("pronto")==0){
			
			writer.writeObject(user);//Scrivo user
			writer.flush();
			
			risposta = (String) buffer.readObject();//Il server ha letto
			
			writer.writeObject(password);//Scrivo password
			writer.flush();
			
			cliente = (Cliente) buffer.readObject();//Ricevo il mio cliente
		}else{
			cliente = null;
			}
		
		chiudereCollegamento();
		
		return cliente;
	}

	@Override
	public Computer[] cercaModelli(String tipo, int numComputer) throws IOException, ClassNotFoundException {
		writer = new ObjectOutputStream(scrittura);
		Computer[] modelli;
		
		writer.writeObject("cercaModelli");//scrivo 1
		writer.flush();
		
		buffer = new ObjectInputStream(lettura);
		
		String risposta = (String) buffer.readObject(); //lego 1
		
		if (risposta.compareTo("pronto")==0){
			
			System.out.println("Sono il client, mi ha risposto il server: "+risposta);
			
			writer.writeObject(tipo); //scrivo 3
			writer.flush();
			
			modelli = (Computer[]) buffer.readObject();
			System.out.println("Sono il client, mi ha risposto il server: "+modelli);
			chiudereCollegamento();
			
			return modelli;
			
		}else{
			return null;
			}
	}

	
	@Override
	public void cercaComponenti(String modello) {
		// TODO Auto-generated method stub

	}

	@Override
	public Ordine fareOrdine() {
		return null;
		// TODO Auto-generated method stub

	}

	@Override
	public void cambiaStatoOrdine(String codOrdine) {
		// TODO Auto-generated method stub

	}


	

	@Override
	public Cliente registraNuovoCliente(String cf, String nome, String cognome,
			String email, String indirizzo, String telefono, String password) throws IOException, ClassNotFoundException {
		
		Cliente cliente;
		writer = new ObjectOutputStream(scrittura);
		writer.writeObject("registrati");
		writer.flush();
		buffer = new ObjectInputStream(lettura);
		String risposta = (String) buffer.readObject();
		
		if (risposta.compareTo("pronto")==0){
			writer.writeObject(cf+"!"+nome+"!"+cognome+"!"+email+"!"+indirizzo+"!"+telefono+"!"+password);
			writer.flush();
			
			cliente =  (Cliente) buffer.readObject();
		}else{
			cliente = null;
			}
		chiudereCollegamento();
		
		return cliente;
	}
	
	/**
	 * Utilizzato per chiudere la connessione client-server
	 * @throws IOException
	 */
	public void chiudereCollegamento() throws IOException{
		writer.close();
		try {
			buffer.close();
			socket.close();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
	}

	@Override
	public int conta(String cosa) throws IOException {
		int num=0;
		String risposta ="";
		writer = new ObjectOutputStream(scrittura);
		writer.writeObject("conta");
		writer.flush();
		buffer = new ObjectInputStream(lettura);
		try {
			risposta = (String) buffer.readObject();
		} catch (ClassNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		if(risposta.compareTo("pronto")==0){
			writer.writeObject(cosa);
			writer.flush();

			try {
				num = (int) buffer.readObject();
			} catch (ClassNotFoundException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			}
		setNum(num);
		chiudereCollegamento();
		return num;
	}

	@Override
	public Ordine creaOrdine(Computer comp, float prezzoTotale, Cliente cliente)
			throws IOException {
	Ordine ordine = null;
		
		writer = new ObjectOutputStream(scrittura);
		
		writer.writeObject("creaOrdine");
		writer.flush();
		
		buffer = new ObjectInputStream(lettura);
		
		String risposta;
		try {
			risposta = (String) buffer.readObject();
			
			if (risposta.compareTo("pronto")==0){
				
				writer.writeObject(comp);
				writer.flush();
				
				risposta = (String) buffer.readObject();
				
				if (risposta.compareTo("ok")==0){
					
					writer.writeObject(prezzoTotale);
					writer.flush();
					
					risposta = (String) buffer.readObject();
					
					if (risposta.compareTo("ok")==0){
						writer.writeObject(cliente);
						writer.flush();
						
						ordine = (Ordine) buffer.readObject();
						System.out.println("Server ha risposto "+ordine.getNumeroOrdine());
					}	
				}
			}
			
		} catch (ClassNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace(); //Collegamento non reuscito
		}
		chiudereCollegamento();
		return ordine;
	}

	@Override
	public Pagamento registrarePagamento(Ordine ordine, String tipoPagamento, String arg1, String arg2)
			throws IOException {
		Pagamento pagamento = null;
		
		writer = new ObjectOutputStream(scrittura);
		
		writer.writeObject("registraPagamento");
		writer.flush();
		
		buffer = new ObjectInputStream(lettura);
		
		String[] argPagamento = new String[3];
		argPagamento[0] = tipoPagamento;
		argPagamento[1] = arg1;
		argPagamento[2] = arg2;
		
		try {
			String risposta;
			risposta = (String) buffer.readObject();
			
			if(risposta.compareTo("pronto")==0){
				writer.writeObject(ordine);
				writer.flush();
				
				risposta = (String) buffer.readObject();
				
				if(risposta.compareTo("ok")==0){
					writer.writeObject(argPagamento);
					writer.flush();
					
					pagamento = (Pagamento) buffer.readObject();
				}
				
			}
		} catch (ClassNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		chiudereCollegamento();
		return pagamento;
	}

	@Override
	public Ordine[] consultaOrdini(Cliente cliente) throws IOException {
		Ordine[] ordini = null;
		writer = new ObjectOutputStream(scrittura);
		
		writer.writeObject("consultaOrdini");
		writer.flush();
		
		buffer = new ObjectInputStream(lettura);
		
		
		try {
			String risposta;
			risposta = (String) buffer.readObject();
			
			if(risposta.compareTo("pronto")==0){
				writer.writeObject(cliente);
				writer.flush();
			
				ordini = (Ordine[]) buffer.readObject();
			}
			
		} catch (ClassNotFoundException e) {
			// TODO Auto-generated catch block
			 
			e.printStackTrace();
		}
		chiudereCollegamento();
		return ordini;
	}

	@Override
	public Ordine[] consultaCarrello(Cliente cliente) throws IOException {
		Ordine[] ordini = null;
		writer = new ObjectOutputStream(scrittura);
		
		writer.writeObject("carrello");
		writer.flush();
		
		buffer = new ObjectInputStream(lettura);
		
		
		try {
			String risposta;
			risposta = (String) buffer.readObject();
			
			if(risposta.compareTo("pronto")==0){
				writer.writeObject(cliente);
				writer.flush();
			
				ordini = (Ordine[]) buffer.readObject();
			}
			
		} catch (ClassNotFoundException e) {
			// TODO Auto-generated catch block
			 
			e.printStackTrace();
		}
		chiudereCollegamento();
		return ordini;
	}

	@Override
	public void aggiornaOrdine(int numOrdine, String nuovoStato)
			throws IOException {
		writer = new ObjectOutputStream(scrittura);
		
		writer.writeObject("aggiornaStato");
		writer.flush();
		
		buffer = new ObjectInputStream(lettura);
		try {
			String risposta;
			risposta = (String) buffer.readObject();
			
			if(risposta.compareTo("pronto")==0){
				writer.writeObject(numOrdine);
				writer.flush();
				
				risposta = (String) buffer.readObject();
				
				if(risposta.compareTo("ok")==0){
					writer.writeObject(nuovoStato);
					writer.flush();
					
					risposta = (String) buffer.readObject();
				}
				}
		}catch (Exception e) {
			// TODO: handle exception
		}
		chiudereCollegamento();
	}

	/**
	 * Metodo che permette di inviare una mail di conferma dell'avvenuto acquisto
	 * al destinatario specificato.
	 * @param to						Destinatario della mail
	 * @param messaggio					Testo del messaggio da inviare
	 * @param subject					Oggetto della mail
	 * @throws UnknownHostException
	 * @throws AddressException
	 * @throws MessagingException
	 */
	public void inviaEmailConferma(String to, String messaggio, String subject) throws UnknownHostException, AddressException, MessagingException{
		String host = "smtp.gmail.com";
	    String from = "guanabana.store";
	    String pass = "programmatori";
	    Properties props = System.getProperties();
	    props.put("mail.smtp.starttls.enable", "true"); // added this line
	    props.put("mail.smtp.host", host);
	    props.put("mail.smtp.user", from);
	    props.put("mail.smtp.password", pass);
	    props.put("mail.smtp.port", "587");
	    props.put("mail.smtp.auth", "true");

	    Session session = Session.getDefaultInstance(props, null);
	    MimeMessage message = new MimeMessage(session);
	    message.setFrom(new InternetAddress(from));

	    InternetAddress toAddress = new InternetAddress(to);
	    
	    message.addRecipient(Message.RecipientType.TO, toAddress);
	    
	    message.setSubject(subject);
	    message.setContent(messaggio, "text/html");
	    Transport transport = session.getTransport("smtp");
	    transport.connect(host, from, pass);
	    transport.sendMessage(message, message.getAllRecipients());
	    transport.close();
	
	}

	@Override
	public Cliente cercaCliente(String cf) {
		// TODO Auto-generated method stub
		return null;
	}
	
	/**
	 * Getter of host
	 * @return host
	 */
	public String getHost() {
		return host;
	}

	/**
	 * Setter of host
	 * @param host
	 */
	public void setHost(String host) {
		this.host = host;
	}
	
	/**
	 * Getter of tipo
	 * @return tipo
	 */
	public String getTipo() {
		return tipo;
	}

	/**
	 * Setter of tipo
	 * @param tipo
	 */
	public void setTipo(String tipo) {
		this.tipo = tipo;
	}

	/**
	 * Getter of num
	 * @return num
	 */
	public int getNum() {
		return num;
	}

	/**
	 * Setter of num
	 * @param num
	 */
	public void setNum(int num) {
		this.num = num;
	}
	
	/**
	 * Getter of port
	 * @return port
	 */
	public int getPort() {
		return port;
	}

	/**
	 * Setter of port
	 * @param port
	 */
	public void setPort(int port) {
		this.port = port;
	}

}
